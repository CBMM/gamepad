begin(pf) {!} Classic {!} plus_zero
begin(tacst) {!} 0 {!} before {!} induction n {!} LtacAtomCall {!} (./foo9.v,48,59)
1 {!} induction n {!} 4
============================
forall n : nat, n = n + 0
{!}

============================
0
end(tacst)
begin(tacst) {!} 0 {!} after {!} induction n {!} LtacAtomCall {!} (./foo9.v,48,59)
2 {!}  {!} 9
============================
0 = 0 + 0
{!}

============================
8
end(tacst)
begin(tacst) {!} 0 {!} after {!} induction n {!} LtacAtomCall {!} (./foo9.v,48,59)
2 {!}  {!} 12
n : nat
IHn : n = n + 0
============================
S n = S n + 0
{!}
IHn, n
============================
10
end(tacst)
begin(subpf)
begin(tacst) {!} 1 {!} before {!} simpl {!} LtacAtomCall {!} (./foo9.v,67,72)
1 {!} simpl {!} 9
============================
0 = 0 + 0
{!}

============================
8
end(tacst)
begin(tacst) {!} 1 {!} after {!} simpl {!} LtacAtomCall {!} (./foo9.v,67,72)
1 {!}  {!} 14
============================
0 = 0
{!}

============================
15
end(tacst)
begin(tacst) {!} 2 {!} before {!} reflexivity {!} LtacNameCall {!} (./foo9.v,78,89)
1 {!}  {!} 14
============================
0 = 0
{!}

============================
15
end(tacst)
begin(tacst) {!} 2 {!} after {!} reflexivity {!} LtacNameCall {!} (./foo9.v,78,89)
1 {!}  {!} 14
============================
0 = 0
{!}

============================
15
end(tacst)
begin(tacst) {!} 3 {!} before {!} <coretactics::reflexivity@0> {!} LtacMLCall {!} (,0,0)
1 {!} <coretactics::reflexivity@0> {!} 14
============================
0 = 0
{!}

============================
15
end(tacst)
begin(tacst) {!} 3 {!} after {!} <coretactics::reflexivity@0> {!} LtacMLCall {!} (,0,0)
ngs=0
end(tacst)
end(subpf)
begin(subpf)
begin(tacst) {!} 4 {!} before {!} simpl {!} LtacAtomCall {!} (./foo9.v,101,106)
1 {!} simpl {!} 12
n : nat
IHn : n = n + 0
============================
S n = S n + 0
{!}
IHn, n
============================
10
end(tacst)
begin(tacst) {!} 4 {!} after {!} simpl {!} LtacAtomCall {!} (./foo9.v,101,106)
1 {!}  {!} 17
n : nat
IHn : n = n + 0
============================
S n = S (n + 0)
{!}
IHn, n
============================
16
end(tacst)
begin(tacst) {!} 5 {!} before {!} rewrite <- IHn {!} LtacAtomCall {!} (./foo9.v,112,126)
1 {!} rewrite <- IHn {!} 17
n : nat
IHn : n = n + 0
============================
S n = S (n + 0)
{!}
IHn, n
============================
16
end(tacst)
begin(tacst) {!} 5 {!} after {!} rewrite <- IHn {!} LtacAtomCall {!} (./foo9.v,112,126)
1 {!}  {!} 18
n : nat
IHn : n = n + 0
============================
S n = S n
{!}
IHn, n
============================
19
end(tacst)
begin(tacst) {!} 6 {!} before {!} reflexivity {!} LtacNameCall {!} (./foo9.v,132,143)
1 {!}  {!} 18
n : nat
IHn : n = n + 0
============================
S n = S n
{!}
IHn, n
============================
19
end(tacst)
begin(tacst) {!} 6 {!} after {!} reflexivity {!} LtacNameCall {!} (./foo9.v,132,143)
1 {!}  {!} 18
n : nat
IHn : n = n + 0
============================
S n = S n
{!}
IHn, n
============================
19
end(tacst)
begin(tacst) {!} 7 {!} before {!} <coretactics::reflexivity@0> {!} LtacMLCall {!} (,0,0)
1 {!} <coretactics::reflexivity@0> {!} 18
n : nat
IHn : n = n + 0
============================
S n = S n
{!}
IHn, n
============================
19
end(tacst)
begin(tacst) {!} 7 {!} after {!} <coretactics::reflexivity@0> {!} LtacMLCall {!} (,0,0)
ngs=0
end(tacst)
end(subpf)
Typs
IHn: 20
n: 1
Bods
Constrs
0: P n 1 2
1: I Coq.Init.Datatypes.nat 0 []
2: A 3 [1 4 5]
3: I Coq.Init.Logic.eq 0 []
4: R 1
5: A 6 [4 7]
6: C Coq.Init.Nat.add []
7: CO Coq.Init.Datatypes.nat 0 1 []
8: A 3 [1 7 9]
9: A 6 [7 7]
10: A 3 [1 11 14]
11: A 12 [13]
12: CO Coq.Init.Datatypes.nat 0 2 []
13: V n
14: A 6 [11 7]
15: A 3 [1 7 7]
16: A 3 [1 11 17]
17: A 12 [18]
18: A 6 [13 7]
19: A 3 [1 11 11]
20: A 3 [1 13 18]
end(pf)
begin(pf) {!} Classic {!} S_comm
begin(tacst) {!} 0 {!} before {!} induction n {!} LtacAtomCall {!} (./foo9.v,210,221)
1 {!} induction n {!} 8
============================
forall n m : nat, S n + m = n + S m
{!}

============================
0
end(tacst)
begin(tacst) {!} 0 {!} after {!} induction n {!} LtacAtomCall {!} (./foo9.v,210,221)
2 {!}  {!} 13
============================
forall m : nat, 1 + m = 0 + S m
{!}

============================
13
end(tacst)
begin(tacst) {!} 0 {!} after {!} induction n {!} LtacAtomCall {!} (./foo9.v,210,221)
2 {!}  {!} 16
n : nat
IHn : forall m : nat, S n + m = n + S m
============================
forall m : nat, S (S n) + m = S n + S m
{!}
IHn, n
============================
19
end(tacst)
begin(subpf)
begin(tacst) {!} 1 {!} before {!} simpl {!} LtacAtomCall {!} (./foo9.v,229,234)
1 {!} simpl {!} 13
============================
forall m : nat, 1 + m = 0 + S m
{!}

============================
13
end(tacst)
begin(tacst) {!} 1 {!} after {!} simpl {!} LtacAtomCall {!} (./foo9.v,229,234)
1 {!}  {!} 20
============================
forall m : nat, S m = S m
{!}

============================
26
end(tacst)
begin(tacst) {!} 2 {!} before {!} intro {!} LtacNotationCall {!} (./foo9.v,240,245)
1 {!} intro {!} 20
============================
forall m : nat, S m = S m
{!}

============================
26
end(tacst)
begin(tacst) {!} 3 {!} before {!} <coretactics::intro@0> {!} LtacMLCall {!} (,0,0)
1 {!} <coretactics::intro@0> {!} 20
============================
forall m : nat, S m = S m
{!}

============================
26
end(tacst)
begin(tacst) {!} 3 {!} after {!} <coretactics::intro@0> {!} LtacMLCall {!} (,0,0)
1 {!}  {!} 21
m : nat
============================
S m = S m
{!}
m
============================
28
end(tacst)
begin(tacst) {!} 2 {!} after {!} intro {!} LtacNotationCall {!} (./foo9.v,240,245)
1 {!}  {!} 21
m : nat
============================
S m = S m
{!}
m
============================
28
end(tacst)
begin(tacst) {!} 4 {!} before {!} reflexivity {!} LtacNameCall {!} (./foo9.v,251,262)
1 {!}  {!} 21
m : nat
============================
S m = S m
{!}
m
============================
28
end(tacst)
begin(tacst) {!} 4 {!} after {!} reflexivity {!} LtacNameCall {!} (./foo9.v,251,262)
1 {!}  {!} 21
m : nat
============================
S m = S m
{!}
m
============================
28
end(tacst)
begin(tacst) {!} 5 {!} before {!} <coretactics::reflexivity@0> {!} LtacMLCall {!} (,0,0)
1 {!} <coretactics::reflexivity@0> {!} 21
m : nat
============================
S m = S m
{!}
m
============================
28
end(tacst)
begin(tacst) {!} 5 {!} after {!} <coretactics::reflexivity@0> {!} LtacMLCall {!} (,0,0)
ngs=0
end(tacst)
end(subpf)
begin(subpf)
begin(tacst) {!} 6 {!} before {!} simpl {!} LtacAtomCall {!} (./foo9.v,274,279)
1 {!} simpl {!} 16
n : nat
IHn : forall m : nat, S n + m = n + S m
============================
forall m : nat, S (S n) + m = S n + S m
{!}
IHn, n
============================
19
end(tacst)
begin(tacst) {!} 6 {!} after {!} simpl {!} LtacAtomCall {!} (./foo9.v,274,279)
1 {!}  {!} 26
n : nat
IHn : forall m : nat, S n + m = n + S m
============================
forall m : nat, S (S (n + m)) = S (n + S m)
{!}
IHn, n
============================
31
end(tacst)
begin(tacst) {!} 7 {!} before {!} intro {!} LtacNotationCall {!} (./foo9.v,285,290)
1 {!} intro {!} 26
n : nat
IHn : forall m : nat, S n + m = n + S m
============================
forall m : nat, S (S (n + m)) = S (n + S m)
{!}
IHn, n
============================
31
end(tacst)
begin(tacst) {!} 8 {!} before {!} <coretactics::intro@0> {!} LtacMLCall {!} (,0,0)
1 {!} <coretactics::intro@0> {!} 26
n : nat
IHn : forall m : nat, S n + m = n + S m
============================
forall m : nat, S (S (n + m)) = S (n + S m)
{!}
IHn, n
============================
31
end(tacst)
begin(tacst) {!} 8 {!} after {!} <coretactics::intro@0> {!} LtacMLCall {!} (,0,0)
1 {!}  {!} 27
n : nat
IHn : forall m : nat, S n + m = n + S m
m : nat
============================
S (S (n + m)) = S (n + S m)
{!}
m, IHn, n
============================
38
end(tacst)
begin(tacst) {!} 7 {!} after {!} intro {!} LtacNotationCall {!} (./foo9.v,285,290)
1 {!}  {!} 27
n : nat
IHn : forall m : nat, S n + m = n + S m
m : nat
============================
S (S (n + m)) = S (n + S m)
{!}
m, IHn, n
============================
38
end(tacst)
begin(tacst) {!} 9 {!} before {!} rewrite <- IHn {!} LtacAtomCall {!} (./foo9.v,296,310)
1 {!} rewrite <- IHn {!} 27
n : nat
IHn : forall m : nat, S n + m = n + S m
m : nat
============================
S (S (n + m)) = S (n + S m)
{!}
m, IHn, n
============================
38
end(tacst)
begin(tacst) {!} 9 {!} after {!} rewrite <- IHn {!} LtacAtomCall {!} (./foo9.v,296,310)
1 {!}  {!} 28
n : nat
IHn : forall m : nat, S n + m = n + S m
m : nat
============================
S (S (n + m)) = S (S n + m)
{!}
m, IHn, n
============================
44
end(tacst)
begin(tacst) {!} 10 {!} before {!} simpl {!} LtacAtomCall {!} (./foo9.v,316,321)
1 {!} simpl {!} 28
n : nat
IHn : forall m : nat, S n + m = n + S m
m : nat
============================
S (S (n + m)) = S (S n + m)
{!}
m, IHn, n
============================
44
end(tacst)
begin(tacst) {!} 10 {!} after {!} simpl {!} LtacAtomCall {!} (./foo9.v,316,321)
1 {!}  {!} 30
n : nat
IHn : forall m : nat, S n + m = n + S m
m : nat
============================
S (S (n + m)) = S (S (n + m))
{!}
m, IHn, n
============================
47
end(tacst)
begin(tacst) {!} 11 {!} before {!} reflexivity {!} LtacNameCall {!} (./foo9.v,327,338)
1 {!}  {!} 30
n : nat
IHn : forall m : nat, S n + m = n + S m
m : nat
============================
S (S (n + m)) = S (S (n + m))
{!}
m, IHn, n
============================
47
end(tacst)
begin(tacst) {!} 11 {!} after {!} reflexivity {!} LtacNameCall {!} (./foo9.v,327,338)
1 {!}  {!} 30
n : nat
IHn : forall m : nat, S n + m = n + S m
m : nat
============================
S (S (n + m)) = S (S (n + m))
{!}
m, IHn, n
============================
47
end(tacst)
begin(tacst) {!} 12 {!} before {!} <coretactics::reflexivity@0> {!} LtacMLCall {!} (,0,0)
1 {!} <coretactics::reflexivity@0> {!} 30
n : nat
IHn : forall m : nat, S n + m = n + S m
m : nat
============================
S (S (n + m)) = S (S (n + m))
{!}
m, IHn, n
============================
47
end(tacst)
begin(tacst) {!} 12 {!} after {!} <coretactics::reflexivity@0> {!} LtacMLCall {!} (,0,0)
ngs=0
end(tacst)
end(subpf)
Typs
IHn: 48
m: 1
n: 1
Bods
Constrs
0: P n 1 2
1: I Coq.Init.Datatypes.nat 0 []
2: P m 1 3
3: A 4 [1 5 11]
4: I Coq.Init.Logic.eq 0 []
5: A 6 [7 10]
6: C Coq.Init.Nat.add []
7: A 8 [9]
8: CO Coq.Init.Datatypes.nat 0 2 []
9: R 2
10: R 1
11: A 6 [9 12]
12: A 8 [10]
13: P m 1 14
14: A 4 [1 15 18]
15: A 6 [16 10]
16: A 8 [17]
17: CO Coq.Init.Datatypes.nat 0 1 []
18: A 6 [17 12]
19: P m 1 20
20: A 4 [1 21 25]
21: A 6 [22 10]
22: A 8 [23]
23: A 8 [24]
24: V n
25: A 6 [23 12]
26: P m 1 27
27: A 4 [1 12 12]
28: A 4 [1 29 29]
29: A 8 [30]
30: V m
31: P m 1 32
32: A 4 [1 33 36]
33: A 8 [34]
34: A 8 [35]
35: A 6 [24 10]
36: A 8 [37]
37: A 6 [24 12]
38: A 4 [1 39 42]
39: A 8 [40]
40: A 8 [41]
41: A 6 [24 30]
42: A 8 [43]
43: A 6 [24 29]
44: A 4 [1 39 45]
45: A 8 [46]
46: A 6 [23 30]
47: A 4 [1 39 39]
48: P m 1 49
49: A 4 [1 50 37]
50: A 6 [23 10]
end(pf)
begin(pf) {!} Classic {!} plus_comm
begin(tacst) {!} 0 {!} before {!} induction n {!} LtacAtomCall {!} (./foo9.v,409,420)
1 {!} induction n {!} 10
============================
forall n m : nat, n + m = m + n
{!}

============================
0
end(tacst)
begin(tacst) {!} 0 {!} after {!} induction n {!} LtacAtomCall {!} (./foo9.v,409,420)
2 {!}  {!} 15
============================
forall m : nat, 0 + m = m + 0
{!}

============================
10
end(tacst)
begin(tacst) {!} 0 {!} after {!} induction n {!} LtacAtomCall {!} (./foo9.v,409,420)
2 {!}  {!} 18
n : nat
IHn : forall m : nat, n + m = m + n
============================
forall m : nat, S n + m = m + S n
{!}
IHn, n
============================
15
end(tacst)
begin(subpf)
begin(tacst) {!} 1 {!} before {!} intro {!} LtacNotationCall {!} (./foo9.v,428,433)
1 {!} intro {!} 15
============================
forall m : nat, 0 + m = m + 0
{!}

============================
10
end(tacst)
begin(tacst) {!} 2 {!} before {!} <coretactics::intro@0> {!} LtacMLCall {!} (,0,0)
1 {!} <coretactics::intro@0> {!} 15
============================
forall m : nat, 0 + m = m + 0
{!}

============================
10
end(tacst)
begin(tacst) {!} 2 {!} after {!} <coretactics::intro@0> {!} LtacMLCall {!} (,0,0)
1 {!}  {!} 19
m : nat
============================
0 + m = m + 0
{!}
m
============================
22
end(tacst)
begin(tacst) {!} 1 {!} after {!} intro {!} LtacNotationCall {!} (./foo9.v,428,433)
1 {!}  {!} 19
m : nat
============================
0 + m = m + 0
{!}
m
============================
22
end(tacst)
begin(tacst) {!} 3 {!} before {!} simpl {!} LtacAtomCall {!} (./foo9.v,439,444)
1 {!} simpl {!} 19
m : nat
============================
0 + m = m + 0
{!}
m
============================
22
end(tacst)
begin(tacst) {!} 3 {!} after {!} simpl {!} LtacAtomCall {!} (./foo9.v,439,444)
1 {!}  {!} 21
m : nat
============================
m = m + 0
{!}
m
============================
26
end(tacst)
begin(tacst) {!} 4 {!} before {!} apply plus_zero {!} LtacAtomCall {!} (./foo9.v,450,465)
1 {!} apply plus_zero {!} 21
m : nat
============================
m = m + 0
{!}
m
============================
26
end(tacst)
begin(tacst) {!} 4 {!} after {!} apply plus_zero {!} LtacAtomCall {!} (./foo9.v,450,465)
ngs=0
end(tacst)
end(subpf)
begin(subpf)
begin(tacst) {!} 5 {!} before {!} intro {!} LtacNotationCall {!} (./foo9.v,477,482)
1 {!} intro {!} 18
n : nat
IHn : forall m : nat, n + m = m + n
============================
forall m : nat, S n + m = m + S n
{!}
IHn, n
============================
15
end(tacst)
begin(tacst) {!} 6 {!} before {!} <coretactics::intro@0> {!} LtacMLCall {!} (,0,0)
1 {!} <coretactics::intro@0> {!} 18
n : nat
IHn : forall m : nat, n + m = m + n
============================
forall m : nat, S n + m = m + S n
{!}
IHn, n
============================
15
end(tacst)
begin(tacst) {!} 6 {!} after {!} <coretactics::intro@0> {!} LtacMLCall {!} (,0,0)
1 {!}  {!} 22
n : nat
IHn : forall m : nat, n + m = m + n
m : nat
============================
S n + m = m + S n
{!}
m, IHn, n
============================
27
end(tacst)
begin(tacst) {!} 5 {!} after {!} intro {!} LtacNotationCall {!} (./foo9.v,477,482)
1 {!}  {!} 22
n : nat
IHn : forall m : nat, n + m = m + n
m : nat
============================
S n + m = m + S n
{!}
m, IHn, n
============================
27
end(tacst)
begin(tacst) {!} 7 {!} before {!} simpl {!} LtacAtomCall {!} (./foo9.v,488,493)
1 {!} simpl {!} 22
n : nat
IHn : forall m : nat, n + m = m + n
m : nat
============================
S n + m = m + S n
{!}
m, IHn, n
============================
27
end(tacst)
begin(tacst) {!} 7 {!} after {!} simpl {!} LtacAtomCall {!} (./foo9.v,488,493)
1 {!}  {!} 24
n : nat
IHn : forall m : nat, n + m = m + n
m : nat
============================
S (n + m) = m + S n
{!}
m, IHn, n
============================
30
end(tacst)
begin(tacst) {!} 8 {!} before {!} rewrite IHn {!} LtacAtomCall {!} (./foo9.v,499,510)
1 {!} rewrite IHn {!} 24
n : nat
IHn : forall m : nat, n + m = m + n
m : nat
============================
S (n + m) = m + S n
{!}
m, IHn, n
============================
30
end(tacst)
begin(tacst) {!} 8 {!} after {!} rewrite IHn {!} LtacAtomCall {!} (./foo9.v,499,510)
1 {!}  {!} 25
n : nat
IHn : forall m : nat, n + m = m + n
m : nat
============================
S (m + n) = m + S n
{!}
m, IHn, n
============================
33
end(tacst)
begin(tacst) {!} 9 {!} before {!} simpl {!} LtacAtomCall {!} (./foo9.v,516,521)
1 {!} simpl {!} 25
n : nat
IHn : forall m : nat, n + m = m + n
m : nat
============================
S (m + n) = m + S n
{!}
m, IHn, n
============================
33
end(tacst)
begin(tacst) {!} 9 {!} after {!} simpl {!} LtacAtomCall {!} (./foo9.v,516,521)
1 {!}  {!} 26
n : nat
IHn : forall m : nat, n + m = m + n
m : nat
============================
S (m + n) = m + S n
{!}
m, IHn, n
============================
33
end(tacst)
begin(tacst) {!} 10 {!} before {!} apply S_comm {!} LtacAtomCall {!} (./foo9.v,527,539)
1 {!} apply S_comm {!} 26
n : nat
IHn : forall m : nat, n + m = m + n
m : nat
============================
S (m + n) = m + S n
{!}
m, IHn, n
============================
33
end(tacst)
begin(tacst) {!} 10 {!} after {!} apply S_comm {!} LtacAtomCall {!} (./foo9.v,527,539)
ngs=0
end(tacst)
end(subpf)
Typs
IHn: 36
m: 1
n: 1
Bods
Constrs
0: P n 1 2
1: I Coq.Init.Datatypes.nat 0 []
2: P m 1 3
3: A 4 [1 5 9]
4: I Coq.Init.Logic.eq 0 []
5: A 6 [7 8]
6: C Coq.Init.Nat.add []
7: R 2
8: R 1
9: A 6 [8 7]
10: P m 1 11
11: A 4 [1 12 14]
12: A 6 [13 8]
13: CO Coq.Init.Datatypes.nat 0 1 []
14: A 6 [8 13]
15: P m 1 16
16: A 4 [1 17 21]
17: A 6 [18 8]
18: A 19 [20]
19: CO Coq.Init.Datatypes.nat 0 2 []
20: V n
21: A 6 [8 18]
22: A 4 [1 23 25]
23: A 6 [13 24]
24: V m
25: A 6 [24 13]
26: A 4 [1 24 25]
27: A 4 [1 28 29]
28: A 6 [18 24]
29: A 6 [24 18]
30: A 4 [1 31 29]
31: A 19 [32]
32: A 6 [20 24]
33: A 4 [1 34 29]
34: A 19 [35]
35: A 6 [24 20]
36: P m 1 37
37: A 4 [1 38 39]
38: A 6 [20 8]
39: A 6 [8 20]
end(pf)
