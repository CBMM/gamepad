begin(pf) {!} Classic {!} foo7
TacDelay(intro)
begin(tacst) {!} 0 {!} before {!} intro {!} LtacNotationCall {!} (./foo7.v,117,122)
1 {!} intro {!} 2
============================
forall n : nat, n = n
end(tacst)
TacDelay(<coretactics::intro@0>)
begin(tacst) {!} 1 {!} before {!} <coretactics::intro@0> {!} LtacMLCall {!} (,0,0)
1 {!} <coretactics::intro@0> {!} 2
============================
forall n : nat, n = n
end(tacst)
begin(tacst) {!} 1 {!} after {!} <coretactics::intro@0> {!} LtacMLCall {!} (,0,0)
1 {!}  {!} 3
n : nat
============================
n = n
end(tacst)
begin(tacst) {!} 0 {!} after {!} intro {!} LtacNotationCall {!} (./foo7.v,117,122)
1 {!}  {!} 3
n : nat
============================
n = n
end(tacst)
TacDelay(case : n => [|n]; simpl; simpl; have hf: 0 = 0 by done; done)
TacDelay(case : n => [|n]; simpl; simpl; have hf: 0 = 0 by done)
TacDelay(case : n => [|n]; simpl; simpl)
TacDelay(case : n => [|n]; simpl)
TacDelay(case : n => [|n])
begin(tacst) {!} 2 {!} before {!} case (ssrcasearg) (ssrclauses) {!} LtacNotationCall {!} (./foo7.v,126,141)
1 {!} case : n => [|n] {!} 3
n : nat
============================
n = n
end(tacst)
TacDelay(<ssreflect_plugin::ssrcase@0> $arg $clauses)
begin(tacst) {!} 3 {!} before {!} <ssreflect_plugin::ssrcase@0> $arg $clauses {!} LtacMLCall {!} (,0,0)
1 {!} <ssreflect_plugin::ssrcase@0> $arg $clauses {!} 3
n : nat
============================
n = n
end(tacst)
REFERENCE(ArgVar: $clauses)!
REFERENCE(ArgVar: $arg)!
begin(tacst) {!} 3 {!} after {!} <ssreflect_plugin::ssrcase@0> $arg $clauses {!} LtacMLCall {!} (,0,0)
2 {!}  {!} 11
============================
0 = 0
end(tacst)
begin(tacst) {!} 3 {!} after {!} <ssreflect_plugin::ssrcase@0> $arg $clauses {!} LtacMLCall {!} (,0,0)
2 {!}  {!} 13
n : nat
============================
S n = S n
end(tacst)
begin(tacst) {!} 2 {!} after {!} case (ssrcasearg) (ssrclauses) {!} LtacNotationCall {!} (./foo7.v,126,141)
2 {!}  {!} 11
============================
0 = 0
end(tacst)
begin(tacst) {!} 2 {!} after {!} case (ssrcasearg) (ssrclauses) {!} LtacNotationCall {!} (./foo7.v,126,141)
2 {!}  {!} 13
n : nat
============================
S n = S n
end(tacst)
TacDelay(simpl)
TacDelay(simpl)
begin(tacst) {!} 6 {!} before {!} simpl {!} LtacAtomCall {!} (./foo7.v,143,148)
2 {!} simpl {!} 11
============================
0 = 0
end(tacst)
begin(tacst) {!} 6 {!} before {!} simpl {!} LtacAtomCall {!} (./foo7.v,143,148)
2 {!} simpl {!} 13
n : nat
============================
S n = S n
end(tacst)
begin(tacst) {!} 6 {!} after {!} simpl {!} LtacAtomCall {!} (./foo7.v,143,148)
2 {!}  {!} 14
============================
0 = 0
end(tacst)
begin(tacst) {!} 6 {!} after {!} simpl {!} LtacAtomCall {!} (./foo7.v,143,148)
2 {!}  {!} 15
n : nat
============================
S n = S n
end(tacst)
TacDelay(simpl)
TacDelay(simpl)
begin(tacst) {!} 7 {!} before {!} simpl {!} LtacAtomCall {!} (./foo7.v,150,155)
2 {!} simpl {!} 14
============================
0 = 0
end(tacst)
begin(tacst) {!} 7 {!} before {!} simpl {!} LtacAtomCall {!} (./foo7.v,150,155)
2 {!} simpl {!} 15
n : nat
============================
S n = S n
end(tacst)
begin(tacst) {!} 7 {!} after {!} simpl {!} LtacAtomCall {!} (./foo7.v,150,155)
2 {!}  {!} 16
============================
0 = 0
end(tacst)
begin(tacst) {!} 7 {!} after {!} simpl {!} LtacAtomCall {!} (./foo7.v,150,155)
2 {!}  {!} 17
n : nat
============================
S n = S n
end(tacst)
TacDelay(have hf: 0 = 0 by done)
TacDelay(have hf: 0 = 0 by done)
begin(tacst) {!} 8 {!} before {!} have (ssrhavefwdwbinders) {!} LtacNotationCall {!} (./foo7.v,159,181)
1 {!} have hf: 0 = 0 by done {!} 16
============================
0 = 0
end(tacst)
TacDelay(<ssreflect_plugin::ssrhave@0> $fwd)
begin(tacst) {!} 9 {!} before {!} <ssreflect_plugin::ssrhave@0> $fwd {!} LtacMLCall {!} (,0,0)
1 {!} <ssreflect_plugin::ssrhave@0> $fwd {!} 16
============================
0 = 0
end(tacst)
REFERENCE(ArgVar: $fwd)!
TacArg(done)
ArgArg before push_trace: done
CALL(NOARG)(done)!
begin(tacst) {!} 11 {!} before {!} done {!} LtacNameCall {!} (./foo7.v,177,181)
1 {!}  {!} 19
============================
0 = 0
end(tacst)
ArgArg after push_trace: done
ArgArg before val_interp: done
TacDelay(trivial; hnf; intros **; (solve
 [ <ssreflect_plugin::ssrtcldo@0>
 ![ solve
  [ trivial | apply : eq_sym; trivial ]
  | discriminate
  | contradiction
  | split ]
 | case not_locked_false_eq_true; assumption
 | match goal with
   | H:~ _ |- _ => solve [ case H; trivial ]
   end ]))
ArgArg after val_interp: done
begin(tacst) {!} 11 {!} afterFOOL {!} done {!} LtacNameCall {!} (./foo7.v,177,181)
1 {!}  {!} 19
============================
0 = 0
end(tacst)
TacDelay(trivial; hnf; intros **)
TacDelay(trivial; hnf)
TacDelay(trivial)
begin(tacst) {!} 12 {!} before {!} trivial (auto_using) (hintbases) {!} LtacNotationCall {!} (./ssreflect/ssreflect.v,19202,19209)
1 {!} trivial {!} 19
============================
0 = 0
end(tacst)
TacDelay(<g_auto::trivial@0> $lems $db)
begin(tacst) {!} 13 {!} before {!} <g_auto::trivial@0> $lems $db {!} LtacMLCall {!} (,0,0)
1 {!} <g_auto::trivial@0> $lems $db {!} 19
============================
0 = 0
end(tacst)
REFERENCE(ArgVar: $db)!
REFERENCE(ArgVar: $lems)!
begin(tacst) {!} 13 {!} after {!} <g_auto::trivial@0> $lems $db {!} LtacMLCall {!} (,0,0)
ngs=0
end(tacst)
begin(tacst) {!} 12 {!} after {!} trivial (auto_using) (hintbases) {!} LtacNotationCall {!} (./ssreflect/ssreflect.v,19202,19209)
ngs=0
end(tacst)
WTF(DELAY)
begin(tacst) {!} 16 {!} before {!} hnf {!} LtacAtomCall {!} (,0,0)
ngs=0
end(tacst)
begin(tacst) {!} 16 {!} after {!} hnf {!} LtacAtomCall {!} (,0,0)
ngs=0
end(tacst)
WTF(DELAY)
begin(tacst) {!} 17 {!} before {!} intros ** {!} LtacAtomCall {!} (,0,0)
ngs=0
end(tacst)
begin(tacst) {!} 17 {!} after {!} intros ** {!} LtacAtomCall {!} (,0,0)
ngs=0
end(tacst)
WTF(DELAY)
TacMatchGoal
begin(tacst) {!} 9 {!} after {!} <ssreflect_plugin::ssrhave@0> $fwd {!} LtacMLCall {!} (,0,0)
1 {!}  {!} 21
hf : 0 = 0
============================
0 = 0
end(tacst)
begin(tacst) {!} 8 {!} before {!} have (ssrhavefwdwbinders) {!} LtacNotationCall {!} (./foo7.v,159,181)
1 {!} have hf: 0 = 0 by done {!} 17
n : nat
============================
S n = S n
end(tacst)
TacDelay(<ssreflect_plugin::ssrhave@0> $fwd)
begin(tacst) {!} 18 {!} before {!} <ssreflect_plugin::ssrhave@0> $fwd {!} LtacMLCall {!} (,0,0)
1 {!} <ssreflect_plugin::ssrhave@0> $fwd {!} 17
n : nat
============================
S n = S n
end(tacst)
REFERENCE(ArgVar: $fwd)!
TacArg(done)
ArgArg before push_trace: done
CALL(NOARG)(done)!
begin(tacst) {!} 20 {!} before {!} done {!} LtacNameCall {!} (./foo7.v,177,181)
1 {!}  {!} 23
n : nat
============================
0 = 0
end(tacst)
ArgArg after push_trace: done
ArgArg before val_interp: done
TacDelay(trivial; hnf; intros **; (solve
 [ <ssreflect_plugin::ssrtcldo@0>
 ![ solve
  [ trivial | apply : eq_sym; trivial ]
  | discriminate
  | contradiction
  | split ]
 | case not_locked_false_eq_true; assumption
 | match goal with
   | H:~ _ |- _ => solve [ case H; trivial ]
   end ]))
ArgArg after val_interp: done
begin(tacst) {!} 20 {!} afterFOOL {!} done {!} LtacNameCall {!} (./foo7.v,177,181)
1 {!}  {!} 23
n : nat
============================
0 = 0
end(tacst)
TacDelay(trivial; hnf; intros **)
TacDelay(trivial; hnf)
TacDelay(trivial)
begin(tacst) {!} 21 {!} before {!} trivial (auto_using) (hintbases) {!} LtacNotationCall {!} (./ssreflect/ssreflect.v,19202,19209)
1 {!} trivial {!} 23
n : nat
============================
0 = 0
end(tacst)
TacDelay(<g_auto::trivial@0> $lems $db)
begin(tacst) {!} 22 {!} before {!} <g_auto::trivial@0> $lems $db {!} LtacMLCall {!} (,0,0)
1 {!} <g_auto::trivial@0> $lems $db {!} 23
n : nat
============================
0 = 0
end(tacst)
REFERENCE(ArgVar: $db)!
REFERENCE(ArgVar: $lems)!
begin(tacst) {!} 22 {!} after {!} <g_auto::trivial@0> $lems $db {!} LtacMLCall {!} (,0,0)
ngs=0
end(tacst)
begin(tacst) {!} 21 {!} after {!} trivial (auto_using) (hintbases) {!} LtacNotationCall {!} (./ssreflect/ssreflect.v,19202,19209)
ngs=0
end(tacst)
WTF(DELAY)
begin(tacst) {!} 25 {!} before {!} hnf {!} LtacAtomCall {!} (,0,0)
ngs=0
end(tacst)
begin(tacst) {!} 25 {!} after {!} hnf {!} LtacAtomCall {!} (,0,0)
ngs=0
end(tacst)
WTF(DELAY)
begin(tacst) {!} 26 {!} before {!} intros ** {!} LtacAtomCall {!} (,0,0)
ngs=0
end(tacst)
begin(tacst) {!} 26 {!} after {!} intros ** {!} LtacAtomCall {!} (,0,0)
ngs=0
end(tacst)
WTF(DELAY)
TacMatchGoal
begin(tacst) {!} 18 {!} after {!} <ssreflect_plugin::ssrhave@0> $fwd {!} LtacMLCall {!} (,0,0)
1 {!}  {!} 25
n : nat
hf : 0 = 0
============================
S n = S n
end(tacst)
begin(tacst) {!} 8 {!} after {!} have (ssrhavefwdwbinders) {!} LtacNotationCall {!} (./foo7.v,159,181)
2 {!}  {!} 21
hf : 0 = 0
============================
0 = 0
end(tacst)
begin(tacst) {!} 8 {!} after {!} have (ssrhavefwdwbinders) {!} LtacNotationCall {!} (./foo7.v,159,181)
2 {!}  {!} 25
n : nat
hf : 0 = 0
============================
S n = S n
end(tacst)
TacArg(done)
TacArg(done)
ArgArg before push_trace: done
CALL(NOARG)(done)!
begin(tacst) {!} 27 {!} before {!} done {!} LtacNameCall {!} (./foo7.v,184,188)
2 {!}  {!} 21
hf : 0 = 0
============================
0 = 0
end(tacst)
begin(tacst) {!} 27 {!} before {!} done {!} LtacNameCall {!} (./foo7.v,184,188)
2 {!}  {!} 25
n : nat
hf : 0 = 0
============================
S n = S n
end(tacst)
ArgArg after push_trace: done
ArgArg before val_interp: done
TacDelay(trivial; hnf; intros **; (solve
 [ <ssreflect_plugin::ssrtcldo@0>
 ![ solve
  [ trivial | apply : eq_sym; trivial ]
  | discriminate
  | contradiction
  | split ]
 | case not_locked_false_eq_true; assumption
 | match goal with
   | H:~ _ |- _ => solve [ case H; trivial ]
   end ]))
TacDelay(trivial; hnf; intros **; (solve
 [ <ssreflect_plugin::ssrtcldo@0>
 ![ solve
  [ trivial | apply : eq_sym; trivial ]
  | discriminate
  | contradiction
  | split ]
 | case not_locked_false_eq_true; assumption
 | match goal with
   | H:~ _ |- _ => solve [ case H; trivial ]
   end ]))
ArgArg after val_interp: done
begin(tacst) {!} 27 {!} afterFOOL {!} done {!} LtacNameCall {!} (./foo7.v,184,188)
2 {!}  {!} 21
hf : 0 = 0
============================
0 = 0
end(tacst)
begin(tacst) {!} 27 {!} afterFOOL {!} done {!} LtacNameCall {!} (./foo7.v,184,188)
2 {!}  {!} 25
n : nat
hf : 0 = 0
============================
S n = S n
end(tacst)
TacDelay(trivial; hnf; intros **)
TacDelay(trivial; hnf; intros **)
TacDelay(trivial; hnf)
TacDelay(trivial; hnf)
TacDelay(trivial)
TacDelay(trivial)
begin(tacst) {!} 28 {!} before {!} trivial (auto_using) (hintbases) {!} LtacNotationCall {!} (./ssreflect/ssreflect.v,19202,19209)
2 {!} trivial {!} 21
hf : 0 = 0
============================
0 = 0
end(tacst)
begin(tacst) {!} 28 {!} before {!} trivial (auto_using) (hintbases) {!} LtacNotationCall {!} (./ssreflect/ssreflect.v,19202,19209)
2 {!} trivial {!} 25
n : nat
hf : 0 = 0
============================
S n = S n
end(tacst)
TacDelay(<g_auto::trivial@0> $lems $db)
TacDelay(<g_auto::trivial@0> $lems $db)
begin(tacst) {!} 29 {!} before {!} <g_auto::trivial@0> $lems $db {!} LtacMLCall {!} (,0,0)
2 {!} <g_auto::trivial@0> $lems $db {!} 21
hf : 0 = 0
============================
0 = 0
end(tacst)
begin(tacst) {!} 29 {!} before {!} <g_auto::trivial@0> $lems $db {!} LtacMLCall {!} (,0,0)
2 {!} <g_auto::trivial@0> $lems $db {!} 25
n : nat
hf : 0 = 0
============================
S n = S n
end(tacst)
REFERENCE(ArgVar: $db)!
REFERENCE(ArgVar: $lems)!
begin(tacst) {!} 29 {!} after {!} <g_auto::trivial@0> $lems $db {!} LtacMLCall {!} (,0,0)
ngs=0
end(tacst)
begin(tacst) {!} 28 {!} after {!} trivial (auto_using) (hintbases) {!} LtacNotationCall {!} (./ssreflect/ssreflect.v,19202,19209)
ngs=0
end(tacst)
WTF(DELAY)
begin(tacst) {!} 32 {!} before {!} hnf {!} LtacAtomCall {!} (,0,0)
ngs=0
end(tacst)
begin(tacst) {!} 32 {!} after {!} hnf {!} LtacAtomCall {!} (,0,0)
ngs=0
end(tacst)
WTF(DELAY)
begin(tacst) {!} 33 {!} before {!} intros ** {!} LtacAtomCall {!} (,0,0)
ngs=0
end(tacst)
begin(tacst) {!} 33 {!} after {!} intros ** {!} LtacAtomCall {!} (,0,0)
ngs=0
end(tacst)
WTF(DELAY)
TacMatchGoal
end(pf)
