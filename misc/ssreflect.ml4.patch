1596,1597c1596
<   (* Proofview.V82.of_tactic (eval_tactic (Tacexpr.TacArg tacexpr)) gl *)
<   Proofview.V82.of_tactic (ml4tp_wrap_catchfail_tac None (eval_tactic (Tacexpr.TacArg tacexpr)) "MYDONE" None) gl
---
>   Proofview.V82.of_tactic (eval_tactic (Tacexpr.TacArg tacexpr)) gl
1639,1648d1637
< 
< (* ============= *)
< (* ML4TP *)
< let show_ssrtacarg = Pml4tp.show_tac
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrtacarg show_ssrtacarg
< let show_ssrtclarg = show_ssrtacarg
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrtclarg show_ssrtclarg
< (* ============= *)
< 
< 
1670,1678d1658
< 
< (* ============= *)
< (* ML4TP *)
< let show_ssrortacs ortacs =
<   Pml4tp.show_sexpr_ls (fun m_tac -> Pml4tp.show_maybe Pml4tp.show_tac m_tac) ortacs
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrortacs show_ssrortacs
< (* ============= *)
< 
< 
1697,1705d1676
< 
< (* ============= *)
< (* ML4TP *)
< let show_ssrhintarg (b, ortacs)=
<   Printf.sprintf "(%b %s)" b (show_ssrortacs ortacs)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrhintarg show_ssrhintarg
< (* ============= *)
< 
< 
1760c1731
<   if arg = nohint then mt() else str " by " ++ pr_hintarg prt arg
---
>   if arg = nohint then mt() else str "by " ++ pr_hintarg prt arg
1767,1774d1737
< 
< (* ============= *)
< (* ML4TP *)
< let show_ssrhint = show_ssrhintarg
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrhint show_ssrhint
< (* ============= *)
< 
< 
1823,1831d1785
< 
< (* ============= *)
< (* ML4TP *)
< let show_hyp (SsrHyp (_, id)) = Pml4tp.show_id id
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrhyp show_hyp
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrhyprep show_hyp
< (* ============= *)
< 
< 
1864,1877d1817
< 
< (* ============= *)
< (* ML4TP *)
< let show_hoi = function
<   | Hyp x -> Printf.sprintf "(H %s)" (show_hyp x)
<   | Id x -> Printf.sprintf "(I %s)" (show_hyp x)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrhoirep show_hoi
< let show_hoi_hyp = show_hoi
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrhoi_hyp show_hoi_hyp
< let show_hoi_id = show_hoi
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrhoi_id show_hoi_id
< (* ============= *)
< 
< 
1903,1910d1842
< 
< (* ============= *)
< (* ML4TP *)
< let show_hyps hyps = Pml4tp.show_sexpr_ls show_hyp hyps
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrhyps show_hyps
< (* ============= *)
< 
< 
1990,1997d1921
< 
< (* ============= *)
< (* ML4TP *)
< let show_clear clr = show_hyps clr
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrclear show_clear
< (* ============= *)
< 
< 
2026,2035d1949
< 
< (* ============= *)
< (* ML4TP *)
< let show_wgen (clr, x) =
<   let f ((id, k), c_p) = Printf.sprintf "(%s %s)" (show_hoi id) (Pml4tp.show_maybe show_cpattern c_p) in
<   Printf.sprintf "(%s %s)" (show_clear clr) (Pml4tp.show_maybe f x)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrwgen show_wgen
< (* ============= *)
< 
< 
2059,2077d1972
< 
< (* ============= *)
< (* ML4TP *)
< let show_clseq = function
<   | InGoal -> "G"
<   | InHyps -> "H"
<   | InSeqGoal -> "SG"
<   | InHypsSeqGoal -> "HSG"
<   | InHypsGoal -> "IHG"
<   | InAll -> "A"
<   | InHypsSeq -> "HS"
<   | InAllHyps -> "AH"
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrclseq show_clseq
< let show_ssrclausehyps hyps =
<   Pml4tp.show_sexpr_ls show_wgen hyps
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrclausehyps show_ssrclausehyps
< (* ============= *)
< 
< 
2097,2105d1991
< 
< (* ============= *)
< (* ML4TP *)
< let show_ssrclauses (hyps, clseq) =
<   Printf.sprintf "(%s %s)" (show_ssrclausehyps hyps) (show_clseq clseq)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrclauses show_ssrclauses
< (* ============= *)
< 
< 
2265,2296d2150
< 
< (* ============= *)
< (* ML4TP *)
< 
< let tclCLAUSES' ist tac (gens, clseq) gl =
<   if clseq = InGoal || clseq = InSeqGoal
<   then tac gl
<   else
<     let clr_gens = pf_clauseids gl gens clseq in
<     let clear = tclTHENLIST (List.rev(List.fold_right clr_of_wgen clr_gens [])) in
<     let gl_id = mk_anon_id hidden_goal_tag gl in
<     let cl0 = pf_concl gl in
<     let dtac gl =
<       let c = pf_concl gl in
<       let gl, args, c =
<         List.fold_right (abs_wgen true ist mk_discharged_id) gens (gl,[], c)
<       in
<       apply_type c args gl
<     in
<     let endtac =
<       let id_map = CList.map_filter (function
<         | _, Some ((x,_),_) -> let id = hoi_id x in Some (mk_discharged_id id, id)
<         | _, None -> None) gens
<       in
<       endclausestac id_map clseq gl_id cl0
<     in
<     let endtac' = Proofview.V82.of_tactic (ml4tp_wrap_catchfail_tac None (Proofview.V82.tactic endtac) "DOEND" None) in
<     tclTHENLIST (hidetacs clseq gl_id cl0 @ [dtac; clear; tac; endtac']) gl
< 
< (* ============= *)
< 
< 
2322,2335d2175
< 
< (* ============= *)
< (* ML4TP *)
< let show_simpl = function
<   | Simpl -> "S"
<   | Cut -> "C"
<   | SimplCut -> "SC"
<   | Nop -> "N"
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrsimplrep show_simpl
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrsimpl_ne show_simpl
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrsimpl show_simpl
< (* ============= *)
< 
< 
2353,2362d2192
< 
< (* ============= *)
< (* ML4TP *)
< let show_rwdir = function
<   | L2R -> "L2R"
<   | R2L -> "R2L"
< let show_dir = show_rwdir
< (* ============= *)
< 
< 
2389,2395d2218
< 
< (* ============= *)
< (* ML4TP *)
< let show_index = Pml4tp.show_or_var string_of_int
< (* ============= *)
< 
< 
2459,2467d2281
< 
< (* ============= *)
< (* ML4TP *)
< let show_occ occ =
<   Pml4tp.show_maybe (fun (b, occ) -> Printf.sprintf "(%b %s)" b (Pml4tp.show_sexpr_ls string_of_int occ)) occ
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrocc show_occ
< (* ============= *)
< 
< 
2495,2504d2308
< 
< (* ============= *)
< (* ML4TP *)
< let show_docc = function
<   | None, occ -> Printf.sprintf "(N %s)" (show_occ occ)
<   | Some clr, _ -> Printf.sprintf "(S %s)" (show_clear clr)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrdocc show_docc
< (* ============= *)
< 
< 
2641,2648d2444
< 
< (* ============= *)
< (* ML4TP *)
< let show_view view =
<   Pml4tp.show_sexpr_ls (fun (_, (c, _)) -> Pml4tp.show_glob_constr c) view
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrview show_view
< (* ============= *)
< 
2870,2899d2665
< 
< (* ============= *)
< (* ML4TP *)
< let rec show_ipat = function
<   | IpatId id ->
<       Printf.sprintf "(I %s)" (Pml4tp.show_id id)
<   | IpatSimpl (clr, sim) ->
<       Printf.sprintf "(S %s %s)" (show_clear clr) (show_simpl sim)
<   | IpatCase iorpat ->
<       Printf.sprintf "(C %s)" (show_iorpat iorpat)
<   | IpatRw (occ, dir) ->
<       Printf.sprintf "(R %s %s)" (show_occ occ) (show_dir dir)
<   | IpatAll -> "A"
<   | IpatWild -> "W"
<   | IpatAnon -> "AN"
<   | IpatView v -> "V"
<   | IpatNoop -> "N"
<   | IpatNewHidden l -> "H"
< and show_iorpat iorpat =
<   Pml4tp.show_sexpr_ls show_ipats iorpat
< and show_ipats ipats =
<   Pml4tp.show_sexpr_ls show_ipat ipats
< 
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssripat show_ipats
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssripats show_ipats
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssriorpat show_iorpat
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssripatrep show_ipat
< (* ============= *)
< 
< 
2973,2981d2738
< 
< (* ============= *)
< (* ML4TP *)
< let show_hpats (((clr, ipat), binders), simpl) =
<   Printf.sprintf "(%s %s %s %s)" (show_clear clr) (show_ipats ipat) (show_ipats binders) (show_ipats simpl)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrhpats show_hpats
< (* ============= *)
< 
< 
2999,3009d2755
< 
< (* ============= *)
< (* ML4TP *)
< let show_hpats_wtransp (b, hpats) =
<   Printf.sprintf "(%b %s)" b (show_hpats hpats)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrhpats_wtransp show_hpats_wtransp
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrhpats_nobs show_hpats
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrrpat show_ipat
< (* ============= *)
< 
< 
3026,3034d2771
< 
< (* ============= *)
< (* ML4TP *)
< let show_intros intrs = show_ipats intrs
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrintros_ne show_intros
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrintros show_intros
< (* ============= *)
< 
< 
3204c2941
< let introstac, tclEQINTROS, tclEQINTROS' =
---
> let introstac, tclEQINTROS =
3249c2986
<     | orp ->
---
>     | orp -> 
3251,3258c2988,2989
<   and tclIORPAT' ?ist k tac = function
<     | [[]] -> tac
<     | orp ->
<        let f tac' = Proofview.V82.of_tactic (ml4tp_wrap_catchfail_tac None (Proofview.V82.tactic tac') "SPC2" None) in
<        tclTHENS_nonstrict tac (mapLR (fun x -> f (ipatstac ?ist k x)) orp) "intro pattern"
<   and ipatstac ?ist k ipats =
<     tclTHENLIST (map_acc_k (ipattac ?ist) k ipats)
<   in
---
>   and ipatstac ?ist k ipats = 
>     tclTHENLIST (map_acc_k (ipattac ?ist) k ipats) in
3262,3268c2993
<     tclTHENLIST [tac; clear_wilds !wild_ids]
<     (*
<     let tac' = Proofview.V82.of_tactic (ml4tp_wrap_catchfail_tac None (Proofview.V82.tactic tac) "SI2" None) in
<     let ctac' = Proofview.V82.of_tactic (ml4tp_wrap_catchfail_tac None (Proofview.V82.tactic (clear_wilds !wild_ids)) "SC" None) in
<     tclTHENLIST [tac'; ctac'] 
<     *)
<   in
---
>     tclTHENLIST [tac; clear_wilds !wild_ids] in
3280,3304c3005,3006
<     tclTHENLIST [tac1; eqtac; tac2; clear_wilds !wild_ids]
<   in
<   let tclEQINTROS' ?ist tac eqtac ipats =
<     wild_ids := [];
<     let rec split_itacs to_clr tac' = function
<     | (IpatSimpl _ as spat) :: ipats' -> 
<       let to_clr, tac = ipattac ?ist to_clr ipats' spat in
<       let tac_w = Proofview.V82.of_tactic (ml4tp_wrap_catchfail_tac None (Proofview.V82.tactic tac') "SPS" None) in
<       split_itacs to_clr (tclTHEN tac_w tac) ipats'
<     | IpatCase iorpat :: ipats' ->
<         to_clr, tclIORPAT' ?ist to_clr tac' iorpat, ipats'
<         (*
< 	let tac_w = Proofview.V82.of_tactic (ml4tp_wrap_catchfail_tac None (Proofview.V82.tactic tac') "SPC" None) in
< 	to_clr, tclIORPAT' ?ist to_clr tac_w iorpat, ipats'
< 	*)
<     | ipats' -> to_clr, tac', ipats' in
<     let to_clr, tac1, ipats' = split_itacs [] tac ipats in
<     let tac2 = ipatstac ?ist to_clr ipats' in
<     let tac1' = Proofview.V82.of_tactic (ml4tp_wrap_catchfail_tac None (Proofview.V82.tactic tac1) "SIO" None) in
<     (* let eqtac' = Proofview.V82.of_tactic (ml4tp_wrap_catchfail_tac None (Proofview.V82.tactic eqtac) "SIE" None) in *)
<     let tac2' = Proofview.V82.of_tactic (ml4tp_wrap_catchfail_tac None (Proofview.V82.tactic tac2) "SI" None) in
<     let ctac' = Proofview.V82.of_tactic (ml4tp_wrap_catchfail_tac None (Proofview.V82.tactic (clear_wilds !wild_ids)) "SC" None) in
<     tclTHENLIST [tac1'; eqtac; tac2'; ctac']
<   in
<   introstac, tclEQINTROS, tclEQINTROS'
---
>     tclTHENLIST [tac1; eqtac; tac2; clear_wilds !wild_ids] in
>   introstac, tclEQINTROS
3314c3016
<   tclEQINTROS' ~ist (tac ist) tclIDTAC ipats
---
>   tclEQINTROS ~ist (tac ist) tclIDTAC ipats
3338,3346d3039
< 
< (* ============= *)
< (* ML4TP *)
< let show_ssrintrosarg (tac, ipats) =
<   Printf.sprintf "(%s %s)" (Pml4tp.show_tac tac) (show_ipats ipats)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrintrosarg show_ssrintrosarg
< (* ============= *)
< 
< 
3381,3391d3073
< 
< (* ============= *)
< (* ML4TP *)
< let show_mmod = function
<   | May -> "M"
<   | Must -> "U"
<   | Once -> "O"
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrmmod show_mmod
< (* ============= *)
< 
< 
3442,3450d3123
< 
< (* ============= *)
< (* ML4TP *)
< let show_ssrdoarg (((n, m), tac), clauses) =
<   Printf.sprintf "(%s %s %s %s)" (show_index n) (show_mmod m) (show_ssrhintarg tac) (show_ssrclauses clauses)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrdoarg show_ssrdoarg
< (* ============= *)
< 
< 
3453,3457c3126
<   tclCLAUSES' ist (tclMULT mul (hinttac ist false tac)) clauses
<   (*
<   let tac' = Proofview.V82.of_tactic (ml4tp_wrap_catchfail_tac None (Proofview.V82.tactic (hinttac ist false tac)) "DO" None) in
<   tclCLAUSES ist (tclMULT mul tac') clauses
<   *)
---
>   tclCLAUSES ist (tclMULT mul (hinttac ist false tac)) clauses
3507,3515d3175
< 
< (* ============= *)
< (* ML4TP *)
< let show_ssrseqarg (idx, (harg, m_tac)) =
<   Printf.sprintf "(%s %s %s)" (show_index idx) (show_ssrhintarg harg) (Pml4tp.show_maybe Pml4tp.show_tac m_tac)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrseqarg show_ssrseqarg
< (* ============= *)
< 
< 
3632,3639d3291
< 
< (* ============= *)
< (* ML4TP *)
< let show_ssrseqdir = show_dir
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrseqdir show_ssrseqdir
< (* ============= *)
< 
< 
3792,3800d3443
< 
< (* ============= *)
< (* ML4TP *)
< let show_gen (docc, dt) =
<   Printf.sprintf "(%s %s)" (show_docc docc) (show_cpattern dt)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrgen show_gen
< (* ============= *)
< 
< 
3918,3931d3560
< 
< (* ============= *)
< (* ML4TP *)
< let show_dgens show_gen (gensl, clr) =
<   match gensl with
<   | [deps; []] -> Printf.sprintf "(%s %s %s)" (Pml4tp.show_sexpr_ls show_gen deps) "[]" (show_clear clr)
<   | [deps; gens] -> Printf.sprintf "(%s %s %s)" (Pml4tp.show_sexpr_ls show_gen deps) (Pml4tp.show_sexpr_ls show_gen gens) (show_clear clr)
<   | [gens] -> Printf.sprintf "(%s %s %s)" "()" (Pml4tp.show_sexpr_ls show_gen gens) (show_clear clr)
<   | _ -> Printf.sprintf "(() () %s)" (show_clear clr)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrdgens_tl (show_dgens show_gen)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrdgens (show_dgens show_gen)
< (* ============= *)
< 
< 
3984,3991d3612
< 
< (* ============= *)
< (* ML4TP *)
< let show_eqid eqid = Pml4tp.show_maybe show_ipat eqid
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssreqid show_eqid
< (* ============= *)
< 
< 
4084,4093d3704
< 
< (* ============= *)
< (* ML4TP *)
< (* TODO *)
< let show_ssrarg (view, (eqid, (dgens, ipats))) =
<   Printf.sprintf "(%s %s %s %s)" (show_view view) (show_eqid eqid) (show_dgens show_gen dgens) (show_intros ipats)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrarg show_ssrarg
< (* ============= *)
< 
< 
4126,4132d3736
< 
< (* ============= *)
< (* ML4TP *)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrmovearg show_ssrarg
< (* ============= *)
< 
< 
4628,4630c4232
<   (* tclTHENLIST [gen_eq_tac; elim_intro_tac] orig_gl *)
<   let gen_eq_tac' = Proofview.V82.of_tactic (ml4tp_wrap_catchfail_tac None (Proofview.V82.tactic gen_eq_tac) "SGE" None) in
<   tclTHENLIST [gen_eq_tac'; elim_intro_tac] orig_gl
---
>   tclTHENLIST [gen_eq_tac; elim_intro_tac] orig_gl
4646,4650d4247
< (* ============= *)
< (* ML4TP *)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrcasearg show_ssrarg
< (* ============= *)
< 
4717,4727d4313
< 
< (* ============= *)
< (* ML4TP *)
< let show_agen (docc, dt) =
<   Printf.sprintf "(%s %s)" (show_docc docc) (show_term dt)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssragen show_agen
< let show_agens = show_dgens show_agen
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssragens show_agens
< (* ============= *)
< 
< 
4749,4757d4334
< 
< (* ============= *)
< (* ML4TP *)
< let show_ssraarg (view, (eqid, (dgens, ipats))) =
<   Printf.sprintf "(%s %s %s %s)" (show_view view) (show_eqid eqid) (show_agens dgens) (show_ipats ipats)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrapplyarg show_ssraarg
< (* ============= *)
< 
< 
4863,4870d4439
< 
< (* ============= *)
< (* ML4TP *)
< let show_ssrexactarg = show_ssraarg
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrexactarg show_ssrexactarg
< (* ============= *)
< 
< 
4898,4906d4466
< 
< (* ============= *)
< (* ML4TP *)
< let show_ssrcongrarg ((i, trm), dgens) =
<   Printf.sprintf "(%d %s %s)" i (show_term trm) (show_dgens show_gen dgens)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrcongrarg show_ssrcongrarg
< (* ============= *)
< 
< 
5032,5043d4591
< 
< (* ============= *)
< (* ML4TP *)
< let show_mult (n, m) =
<   if n > 0 && m <> Once
<   then Printf.sprintf "(%d %s)" n (show_mmod m)
<   else show_mmod m
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrmult_ne show_mult
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrmult show_mult
< (* ============= *)
< 
< 
5059,5067d4606
< 
< (* ============= *)
< (* ML4TP *)
< let show_rwocc (m_clr, occ) =
<   Printf.sprintf "(%s %s)" (Pml4tp.show_maybe show_clear m_clr) (show_occ occ)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrrwocc show_rwocc
< (* ============= *)
< 
< 
5100,5111d4638
< 
< (* ============= *)
< (* ML4TP *)
< let show_rule = function
<   | RWred s, _ -> Printf.sprintf "(R %s)" (show_simpl s)
<   | RWdef, r-> Printf.sprintf "(D %s)" (show_term r)
<   | RWeq, r -> Printf.sprintf "(E %s)" (show_term r)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrrule_ne show_rule
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrrule show_rule
< (* ============= *)
< 
< 
5161,5168d4687
< (* ============= *)
< (* ML4TP *)
< let show_pattern_squarep rx = Pml4tp.show_maybe show_rpattern rx
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrpattern_squarep show_pattern_squarep
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrpattern_ne_squarep show_pattern_squarep
< (* ============= *)
< 
< 
5192,5200d4710
< 
< (* ============= *)
< (* ML4TP *)
< let show_ssrrwarg ((d, m), ((docc, rx), r)) =
<    Printf.sprintf "(%s %s %s %s %s)" (show_rwdir d) (show_mult m) (show_rwocc docc) (show_pattern_squarep rx) (show_rule r)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrrwarg show_ssrrwarg
< (* ============= *)
< 
< 
5661,5667d5170
< (* ============= *)
< (* ML4TP *)
< let show_ssrrwargs rwargs =
<    Pml4tp.show_sexpr_ls show_ssrrwarg rwargs
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrrwargs show_ssrrwargs
< (* ============= *)
< 
5696,5699d5198
<   (*
<   let f tac = ml4tp_wrap_catchfail_tac None (rwargtac ist tac) "SsrRewrite" None in
<   tclTHENLIST (List.map f rwargs))
<   *)
5762,5769d5260
< 
< (* ============= *)
< (* ML4TP *)
< let show_ssrfwdid id = Pml4tp.show_id id
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrfwdid show_ssrfwdid
< (* ============= *)
< 
< 
5814,5830d5304
< 
< (* ============= *)
< (* ML4TP *)
< let show_binder = function
<   | Bvar x ->
<     Printf.sprintf "(V %s)" (Pml4tp.show_name x)
<   | Bdecl (xs, t) ->
<     Printf.sprintf "(DC %s %s)" (Pml4tp.show_sexpr_ls Pml4tp.show_name xs) (Pml4tp.show_glob_constr t)
<   | Bdef (x, m_t, v) ->
<     Printf.sprintf "(Df %s %s %s)" (Pml4tp.show_name x) (Pml4tp.show_maybe Pml4tp.show_glob_constr m_t) (Pml4tp.show_glob_constr v)
<   | Bstruct x ->
<     Printf.sprintf "(S %s)" (Pml4tp.show_name x)
<   | Bcast t ->
<     Printf.sprintf "(C %s)" (Pml4tp.show_glob_constr t)
< (* ============= *)
< 
< 
5953,5974d5426
< 
< (* ============= *)
< (* ML4TP *)
< 
< let show_ssrfwdkind = function
<   | FwdHint _ -> "HT"
<   | FwdHave _ -> "HV"
<   | FwdPose _ -> "P"
< 
< let show_ssrbindfmt = function
<   | BFvar -> "V"
<   | BFdecl i -> Printf.sprintf "(D %d)" i
<   | BFcast -> "C"
<   | BFdef b -> Printf.sprintf "(E %b)" b
<   | BFrec (b1, b2) -> Printf.sprintf "(R %b %b)" b1 b2
< 
< let show_ssrfwdfmt (fk, bfs) =
<   Printf.sprintf "(%s %s)" (show_ssrfwdkind fk) (Pml4tp.show_sexpr_ls show_ssrbindfmt bfs)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrfwdfmt show_ssrfwdfmt
< (* ============= *)
< 
< 
6015,6026d5466
< 
< (* ============= *)
< (* ML4TP *)
< let show_gen_fwd fk (bs, c) =
<   Printf.sprintf "(%s %s %s)" (show_ssrfwdkind fk) (Pml4tp.show_sexpr_ls show_binder bs) (Pml4tp.show_glob_constr c)
< let show_fwd = function
<   | (fk, h), (_, (c, _)) ->
<     Printf.sprintf "(%s %s)" (show_ssrfwdkind fk) (show_gen_fwd fk (format_glob_constr h c))
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrfwd show_fwd
< (* ============= *)
< 
< 
6130,6137d5569
< 
< (* ============= *)
< (* ML4TP *)
< let show_ssrposefwd = show_fwd
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrposefwd show_ssrposefwd
< (* ============= *)
< 
< 
6169,6176d5600
< (* ============= *)
< (* ML4TP *)
< let show_ssrfixfwd (id, fwd) =
<   Printf.sprintf "(%s %s)" (Pml4tp.show_id id) (show_fwd fwd)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrfixfwd show_ssrfixfwd
< (* ============= *)
< 
< 
6195,6202d5618
< 
< (* ============= *)
< (* ML4TP *)
< let show_ssrcofixfwd = show_ssrfixfwd
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrcofixfwd show_ssrcofixfwd
< (* ============= *)
< 
< 
6249,6257d5664
< 
< (* ============= *)
< (* ML4TP *)
< let show_ssrsetfwd ((fwd, (lcpat, m_t)), docc) =
<   Printf.sprintf "(%s %s %s %s)" (show_ssrfwdfmt fwd) (show_cpattern lcpat) (Pml4tp.show_maybe show_term m_t) (show_docc docc)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrsetfwd show_ssrsetfwd
< (* ============= *)
< 
< 
6292,6300d5698
< 
< (* ============= *)
< (* ML4TP *)
< let show_ssrhavefwd (fwd, hint) =
<   Printf.sprintf "(%s %s)" (show_fwd fwd) (show_ssrhint hint)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrhavefwd show_ssrhavefwd
< (* ============= *)
< 
< 
6332,6340d5729
< 
< (* ============= *)
< (* ML4TP *)
< let show_ssrhavefwdwbinders (tr, ((hpats, (fwd, hint)))) =
<   Printf.sprintf "(%s %s)" (show_hpats hpats) (show_fwd fwd)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrhavefwdwbinders show_ssrhavefwdwbinders
< (* ============= *)
< 
< 
6620,6628d6008
< 
< (* ============= *)
< (* ML4TP *)
< let show_ssrsufffwd (hpats, (fwd, hint)) =
<   Printf.sprintf "(%s %s %s)" (show_hpats hpats) (show_fwd fwd) (show_ssrhint hint)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrsufffwd show_ssrsufffwd
< (* ============= *)
< 
< 
6660,6668d6039
< 
< (* ============= *)
< (* ML4TP *)
< let show_ssrwlogfwd (gens, t) =
<   Printf.sprintf "(%s %s)" (Pml4tp.show_sexpr_ls show_wgen gens) (show_fwd t)
< let _ = Pml4tp.declare_extra_genarg_showrule1 wit_ssrwlogfwd show_ssrwlogfwd
< (* ============= *)
< 
< 
